---
title: "<br><br><br><span style='color:tomato;'>Version Control</span> for <br>Scientific Collaboration"
subtitle: "Summer Workshop Series -- July 11, 2022"
author: "Ryan Mears"
format: 
  revealjs:
    slide-number: true
    preview-links: auto
    smaller: false
    scrollable: true
    title-slide-attributes:
      data-background-image: Git-Logo-2Color.png
      data-background-size: contain
      data-background-opacity: '0.2'
      data-background-position: top
editor_options: 
  chunk_output_type: inline
---

# Git

## A History of Git {.smaller}

- Invented by Linus Torvalds in 2005 <br> for maintenence of Linux kernel
- *Git* - an idiom meaning idiot or fool
- Complexity required for remote and local tracking of changes
  
*Goals of the Git version control system (VCS)*:  
  
- Speed
- Simple design
- Strong support for non-linear development (thousands of parallel branches)
- Fully distributed
- Able to handle large projects like the Linux kernel efficiently (speed and data size)

![](Linuxs-Creator-Linus-Torvalds-Jerk.jpeg){.absolute top=0 right=0  height="200"} 

:::{.notes}
https://en.wikipedia.org/wiki/Linus_Torvalds
http://git-scm.com/book/en/v2/
::: 

## Why use Git?

- Analogy: turn tracking-changes `on` in Word document
- Antipattern: revision auto-saving w/ time-stamp  


![](phd_cycle.jpeg){.absolute top=225 left=50  height="375"} 

![](phd101212s.gif){.absolute top=225 right=150  height="500"} 

::: aside
[via Twitter](https://twitter.com/PHDcomics/status/1299664600166789120?s=20&t=--Q-z2LQy59FlTGd_8DbKw)
[phdcomics.com](https://phdcomics.com/comics/archive_print.php?comicid=1531)
:::


## Why use Git?

- Remote repo: accessed & <br> updated anytime
- Solutions for continuous <br> merging of sets of changes

![](team-git.png){.absolute top=0 right=-10  height="450"} 

::: aside
> Perez-Riverol, *et al.* (2016). Ten Simple Rules for Taking Advantage of Git & GitHub. *PLoS computational biology*, [12(7), e1004947.](https://doi.org/10.1371/journal.pcbi.1004947)
::: 



## How to use Git {.smaller}

- Three States
   - *Modified* means that you have changed the file <br> but have not committed it to your database yet.
   - *Staged* means that you have marked a modified file <br> to go into your next commit snapshot.
   - *Committed* means data is safely stored in local database.
   
![](git-lifecycle.png){.absolute bottom=0 left=200  height="300"} 


## How to use Git

::: columns



::: {.column width="35%"}

*Frequently used*  
```{git}
git status
git add
git commit -a
git push
```

:::

::: {.column width="20%"}

:::


::: {.column width="35%"}
*Used at key points*  

```{git}
git config
git clone
git log
git pull
git branch
git diff
```

:::
:::

[ProGit Book](http://git-scm.com/book/en/v2/Getting-Started-What-is-Git%3F)

![](progit2.png){.absolute bottom=50 left=250  height="300"} 


::: {background-opacity="0.3"  background-iframe="http://karthik.github.io/git_intro/#/slide-title" style="text-align: left; margin-top: 1em"}
## [Best Git INTRO](http://karthik.github.io/git_intro/#/slide-title){preview-link="true" style="text-align: center"}
:::

## Key Feature of Git: Timeline Control 

![](reachability-example.png)

[Example from *Think Like (a) Git: A Guide for the Perplexed*](https://think-like-a-git.net/sections/graph-theory/reachability.html)

::: {.notes}

You can think of this graph as a set of three parallel universes with time flowing from left to right, so that A is the beginning of recorded history. (The arrow represents the "follows" or "is subsequent to" relationship, so you might say that "B follows A".)

:::

## Key Feature of Git: Timeline Control 

![](reachability-exampleE.jpg)


## Key Feature of Git: Timeline Control 

![](reachability-exampleK.jpg)

::: {.notes}

- If you start from E, the history you'll see is A, B, C, D, E.

:::

## Key Feature of Git: Timeline Control 

![](reachability-exampleH.jpg)


::: {.notes}
- If you start from K, the history you'll see is A, B, C, I, J, K.
But the really important thing about this is that no matter which node you start with, some **parts of the graph will be unreachable** to you.  

*turn it around*: **Depending** on where you start, you can **reach parts** of the graph that you couldn't get to otherwise.  

:::


## Key Feature of Git: Timeline Control 

![](graph.png)

## {background-image="Git-4yrs-up.png" background-size="cover"}


::: {.notes}
[Git-4yrs-up 1h 31m](https://youtu.be/1ffBJ4sVUb4?t=5460)
:::

## Learn Git

- [git-scm.com/docs](https://git-scm.com/docs)
- [git-scm.com/book/en/v2/Git-Basics-Recording-Changes-to-the-Repository](http://git-scm.com/book/en/v2/Git-Basics-Recording-Changes-to-the-Repository)
- [ndpsoftware.com/git-cheatsheet.html](https://ndpsoftware.com/git-cheatsheet.html)


## Practice Git!!

- [https://git-school.github.io/visualizing-git/](https://git-school.github.io/visualizing-git/)
- [learngitbranching.js.org](https://learngitbranching.js.org)
- [app.datacamp.com/learn/courses/introduction-to-git](https://app.datacamp.com/learn/courses/introduction-to-git)
- [www.w3schools.com/git/git_exercises.asp](https://www.w3schools.com/git/git_exercises.asp)

::: aside
[](https://youtu.be/1ffBJ4sVUb4)
:::

## Repositories

You typically obtain a Git repository in one of two ways:  
- Initializing a Repository  
- Cloning an Existing Repository  

# GitHub

## GitHub
- *Analogy*: Similar to Dropbox except sync timing
- *Antipattern*: Dropbox has no system to entertain +1 versions
- One variant of remote-repository hosting including: 
   - BitBucket, GitLab, Sourceforge 
- Extensive documentation and additional online features
- Project organization tools: Projects, wikis, webpages
- Security: public vs private (e.g., access-control & 2FA)
   - Private: organizations, teams, assignees
   - Public: oocial tools, watching, fork-ing


## Getting Started with GH Desktop


- [GHD](https://desktop.github.com)
- [GitHub: Hello World!](https://docs.github.com/en/get-started/quickstart/hello-world)

![](ghd.png){.absolute top=250 left=0  height="400"} 

![](helloworld.png){.absolute top=250 right=0  height="400"} 

## Getting Started with GH Desktop



[Github Desktop Setup](https://docs.github.com/en/desktop/installing-and-configuring-github-desktop/overview/creating-your-first-repository-using-github-desktop#part-1-installing-github-desktop-and-authenticating-your-account)


![](GHDesktop.png)
## Getting Started with GH Desktop

![](ScreenShots/GH-desktop.png)

## Issues

This is where the organization of development begins  

- `@` mention collaborators
- `#` followed by issue title, links related issues in repository
- Create and assign new branch for issue (When pull-request; issue closed?)


::: aside
[Github: tracking-your-work-with-issues/quickstart](https://docs.github.com/en/issues/tracking-your-work-with-issues/quickstart)
[Github: creating-an-issue](https://docs.github.com/en/issues/tracking-your-work-with-issues/creating-an-issue)
[Github: creating-a-branch-for-an-issue](https://docs.github.com/en/issues/tracking-your-work-with-issues/creating-a-branch-for-an-issue)
:::

::: {.notes}

When you mention an issue in another issue or pull request, the issue's timeline reflects the cross-reference so that you can keep track of related work. To indicate that work is in progress, you can link an issue to a pull request. When the pull request merges, the linked issue automatically closes.

::: 

## Issues

![](ScreenShots/issue1a.png)

## Issues

![](ScreenShots/issue1b.png)

## Issues

![](ScreenShots/issue2a.png)

## Issues

![](ScreenShots/issue2b.png)

## Issues

![](ScreenShots/issue2c.png)

## Issues

![](ScreenShots/issue2d.png)

## Issues

![](ScreenShots/issue2e.png)

## Issues

![](ScreenShots/EnableDiscussions.png)

## Discussions 

Use GitHub Repository Discussions to:   

- ask and answer questions
- share information
- make announcements
- conduct or participate in <br> conversations about a project

![](repo-discussion.png){.absolute top=180 right=50  height="350"} 

::: aside
   - [Repo discussions](https://github.com/csea-lab/github-collaboration-slides/discussions)
::: 


## Repos

- remote-repositories 
- cloning vs forking
- tracking changes
- commits
- main/local
- branches
- merges 

## Pull-Requests

- at some point consolidation of work needs to happen

## Writing Manuscripts

[Manuscript written on GitHub](https://github.com/ypriverol/github-paper/blob/master/document/manuscript.md)

## Flow Diagrams

[Manuscript written on GitHub: history flow diagram](https://github.com/ypriverol/github-paper/network)

# GitHub Organizations, Projects, & Beyond

## Teams and Code Review {.smaller}

- Teams for sub-components of larger projects
- Teams for super-group for several repos
- Groups in classrooms: template projects and assignments 
- Packages to arrange <br> members, groups, <br> communication,<br>  & organization

![](team-discussion.png){.absolute bottom=110 right=0  height="330"} 

::: aside

   - [https://github.com/orgs/csea-lab/teams/example-team](https://github.com/orgs/csea-lab/teams/example-team)  
   - [https://github.com/orgs/csea-lab/teams/example-team/discussions](https://github.com/orgs/csea-lab/teams/example-team/discussions)  

:::


## Version Control for Open Science

- [MNE](https://github.com/mne-tools/mne-python)
- [FieldTrip](https://github.com/fieldtrip/fieldtrip)

- [Fieldtrip: releases](https://github.com/fieldtrip/fieldtrip/releases/tag/20220617)

## Projects

- [Fieldtrip: project boards](https://github.com/fieldtrip/fieldtrip/projects?type=classic)
- [Fieldtrip: completed project](https://github.com/fieldtrip/fieldtrip/projects/3)
- [Fieldtrip: ongoing project - source modeling](https://github.com/fieldtrip/fieldtrip/projects/2)
- [Fieldtrip: ongoing project - performance enhancement](https://github.com/fieldtrip/fieldtrip/projects/5)

- [MNE Sprint June 2022](https://github.com/orgs/mne-tools/projects/2/views/1)


# Webpages and Wikis

- Built-in GitHub wikis
- Hosting webpages
- Hosting slides
- Verson control to other high bandwidth servers 

## ROpenSci

- [ROpenSci](https://ropensci.org)
- [ROpenSci: Developer Guide](https://devguide.ropensci.org)
- [ROpenSci: Code Review Process](https://ropensci.org/software-review/)
- [ROpenSci: R-Universe](https://ropensci.r-universe.dev/ui#packages)
- [ROpenSci: Collaborating](https://devguide.ropensci.org/collaboration.html)
- [ROpenSci: news template](https://devguide.ropensci.org/newstemplate.html)

# Developer Events

## Code Sprints

- [MNE Code Sprint 2019](https://mne.tools/sprint2019/)
- [Fieldtrip: project boards Sprints](https://github.com/fieldtrip/fieldtrip/projects?type=classic)

- [Wikipedia: Hackathons entry](https://en.wikipedia.org/wiki/Hackathon)
- [GitHub: Hackathons Guide](https://github.com/topics/hackathons?o=desc&s=updated)
- [Book: Hackathon Survival Guide](https://www.amazon.com/Hackathon-Survival-Guide-stand-crowd/dp/1739627822)


# CodeSpaces

- Integrated with VS Code
- Run code from a Repo in a Containerized environment




---

## Resources 

- [Karl Broman: Tutorials](https://kbroman.org/tutorials.html)
- [Karl Broman: GitHub Tutorial](https://kbroman.org/github_tutorial/)
- [Karl Broman: Git Merge Conflict Tutorial](https://kbroman.org/github_tutorial/pages/merge_conflicts.html)
- [Karl Broman: Exploring Code Tutorial](https://kbroman.org/github_tutorial/pages/exploring_code.html)
- [Karl Broman: Git Branching Tutorial](https://kbroman.org/github_tutorial/pages/branching.html)
- [Karl Broman: List of Git commands](https://github.com/kbroman/Tools4RR/blob/main/04_Git/GitCommands/git_notes.md)

- [Bryan Happy Git With R](https://happygitwithr.com/index.html)

- [Data Carpentry tutorial: git-in-github](https://datacarpentry.org/rr-version-control/02-git-in-github/index.html)
- [Software Carpentry tutorial: Git Novice](https://swcarpentry.github.io/git-novice/)
- [Library Carpentry tutorial: Git](https://librarycarpentry.org/lc-git/_)

- [rogerdudler.github.io/git-guide](https://rogerdudler.github.io/git-guide/)
- [git_cheat_sheet](https://rogerdudler.github.io/git-guide/files/git_cheat_sheet.pdf)

- [Think Like a Git](https://think-like-a-git.net)

- [github-git-cheat-sheet](https://training.github.com/downloads/github-git-cheat-sheet/)








